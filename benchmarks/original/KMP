---Header of the KMP
fmod KMP-HEADER is
	pr NAT .
	ops f g h : -> Nat . ---maximun length of the SString. Eg.: if f=10, then repeat 9 'a' + 'b' + 'nc'.
  eq f =  100000 . 
  eq g = 1000000 .
  eq h = 5000000 .	
    	
	sorts Symbol SString .
	subsort Symbol < SString .
	ops a b : -> Symbol .
	op nc : -> SString .    
	op __ : Symbol SString -> SString .
		
	vars SE SS : Symbol . var N : Nat . var S : SString .  
  ---Parameters: <Symbol start, String, maximun length>
	op create : Symbol SString Nat -> SString . ---function to create the input String
	eq create(SS, S, 1) = SS S .
	eq create(SS, S, s(N)) = create(SS, SS S, N) [owise] .	
endfm

---red in KMP-HEADER : create(a, b nc, f) . ---only create a SString of a+n+nc

fmod KMP is
	inc KMP-HEADER .
	vars PP SS OP OS : SString .
	vars P S : Symbol .
	
	op match : SString SString -> Bool .
	eq match(PP, SS) = 
			loop(PP, SS, PP, SS) [variant] .
		
	op loop : SString SString SString SString -> Bool .
	eq loop(nc, SS, OP, OS) = true [variant] .
	eq loop((P PP), nc, OP, OS) = false [variant] .
	eq loop((P PP), (S SS), OP, OS) = 
			if? P =:= S
			then loop(PP, SS, OP, OS)  
			else next(OP, OS) fi [variant] .
	
	op if?_then_else_fi : Bool Bool Bool -> [Bool] [strat(1 0)] .
	eq if? true then B1:Bool else B2:Bool fi = B1:Bool .
	eq if? false then B1:Bool else B2:Bool  fi = B2:Bool .
		
	op _=:=_ : Symbol Symbol -> [Bool] .	
	eq a =:= b = false [variant] .
	eq b =:= a = false [variant] .
	eq b =:= b = true [variant] .	
	eq a =:= a = true [variant] .
			
	op next : SString SString -> Bool .
	eq next(OP, nc) = false [variant] .
	eq next(OP, (S SS)) = loop(OP, SS, OP, SS) [variant] .
endfm

---red in KMP : match((a a b nc), create(a, b nc, f)) . ---goal
